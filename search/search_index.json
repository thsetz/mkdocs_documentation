{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This site contains the project documentation for the calculator project that is a toy module used in the Real Python tutorial Build Your Python Project Documentation With MkDocs . Its aim is to give you a framework to build your project documentation using Python, MkDocs, mkdocstrings, and the Material for MkDocs theme. Table Of Contents The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts: Tutorials How-To Guides Reference Explanation Quickly find what you're looking for depending on your use case by looking at the different pages. Project Overview Do math with your own functions. Modules exported by this package: proj : Provide several sample math calculations.","title":"Project Docs"},{"location":"#table-of-contents","text":"The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts: Tutorials How-To Guides Reference Explanation Quickly find what you're looking for depending on your use case by looking at the different pages.","title":"Table Of Contents"},{"location":"#project-overview","text":"Do math with your own functions. Modules exported by this package: proj : Provide several sample math calculations.","title":"Project Overview"},{"location":"explanation/","text":"This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented. Note: Expand this section by considering the following points: Give context and background on your library Explain why you created it Provide multiple examples and approaches of how to work with it Help the reader make connections Avoid writing instructions or technical descriptions here Component Sequence","title":"Explanation"},{"location":"explanation/#component","text":"","title":"Component"},{"location":"explanation/#sequence","text":"","title":"Sequence"},{"location":"how-to-guides/","text":"This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project. How To Add Two Numbers? You have two numbers and you need to add them together. You're in luck! The calculator package can help you get this done. Download the code from this GitHub repository and place the calculator/ folder in the same directory as your Python script: your_project/ \u2502 \u251c\u2500\u2500 calculator/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 calculations.py \u2502 \u2514\u2500\u2500 your_script.py Inside of your_script.py you can now import the add() function from the calculator.calculations module: # your_script.py from calculator.calculations import add After you've imported the function, you can use it to add any two numbers that you need to add: # your_script.py from calculator.calculations import add print(add(20, 22)) # OUTPUT: 42.0 You're now able to add any two numbers, and you'll always get a float as a result.","title":"How-To Guides"},{"location":"how-to-guides/#how-to-add-two-numbers","text":"You have two numbers and you need to add them together. You're in luck! The calculator package can help you get this done. Download the code from this GitHub repository and place the calculator/ folder in the same directory as your Python script: your_project/ \u2502 \u251c\u2500\u2500 calculator/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 calculations.py \u2502 \u2514\u2500\u2500 your_script.py Inside of your_script.py you can now import the add() function from the calculator.calculations module: # your_script.py from calculator.calculations import add After you've imported the function, you can use it to add any two numbers that you need to add: # your_script.py from calculator.calculations import add print(add(20, 22)) # OUTPUT: 42.0 You're now able to add any two numbers, and you'll always get a float as a result.","title":"How To Add Two Numbers?"},{"location":"reference/","text":"This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the project project code. Provide several sample math calculations. This module allows the user to make mathematical calculations. Examples: >>> from project import proj >>> proj . add ( 2 , 4 ) 6.0 >>> proj . multiply ( 2.0 , 4.0 ) 8.0 >>> from project.proj import divide >>> divide ( 4.0 , 2 ) 2.0 The module contains the following functions: add(a, b) - Returns the sum of two numbers. subtract(a, b) - Returns the difference of two numbers. multiply(a, b) - Returns the product of two numbers. divide(a, b) - Returns the quotient of two numbers. add ( a , b ) Compute and return the sum of two numbers. Examples: >>> add ( 4.0 , 2.0 ) 6.0 >>> add ( 4 , 2 ) 6.0 Parameters: Name Type Description Default a float A number representing the first addend in the addition. required b float A number representing the second addend in the addition. required Returns: Name Type Description float float A number representing the arithmetic sum of a and b . Source code in project/proj.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def add ( a : Union [ float , int ], b : Union [ float , int ]) -> float : \"\"\"Compute and return the sum of two numbers. Examples: >>> add(4.0, 2.0) 6.0 >>> add(4, 2) 6.0 Args: a (float): A number representing the first addend in the addition. b (float): A number representing the second addend in the addition. Returns: float: A number representing the arithmetic sum of `a` and `b`. \"\"\" return float ( a + b )","title":"Reference"},{"location":"reference/#project.proj.add","text":"Compute and return the sum of two numbers. Examples: >>> add ( 4.0 , 2.0 ) 6.0 >>> add ( 4 , 2 ) 6.0 Parameters: Name Type Description Default a float A number representing the first addend in the addition. required b float A number representing the second addend in the addition. required Returns: Name Type Description float float A number representing the arithmetic sum of a and b . Source code in project/proj.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def add ( a : Union [ float , int ], b : Union [ float , int ]) -> float : \"\"\"Compute and return the sum of two numbers. Examples: >>> add(4.0, 2.0) 6.0 >>> add(4, 2) 6.0 Args: a (float): A number representing the first addend in the addition. b (float): A number representing the second addend in the addition. Returns: float: A number representing the arithmetic sum of `a` and `b`. \"\"\" return float ( a + b )","title":"add()"},{"location":"tutorials/","text":"This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project. Note: Expand this section by considering the following points: Help newcomers with getting started Teach readers about your library by making them write code Inspire confidence through examples that work for everyone, repeatably Give readers an immediate sense of achievement Show concrete examples, no abstractions Provide the minimum necessary explanation Avoid any distractions","title":"Tutorials"}]}